package db

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/nuvosphere/nudex-voter/internal/layer2/contracts"
	"github.com/nuvosphere/nudex-voter/internal/types"
	"github.com/stretchr/testify/assert"
)

func TestEncodeCreateWalletTask(t *testing.T) {
	task := CreateWalletTask{
		BaseTask: BaseTask{
			TaskId: 100,
		},
		Account: uint32(10001),
		Chain:   uint8(types.ChainEthereum),
		Index:   uint8(0),
	}
	taskBytes, err := EncodeTask(TaskTypeCreateWallet, task)
	assert.NoError(t, err)
	assert.NotNil(t, taskBytes)
	t.Log(hex.EncodeToString(taskBytes))
	assert.True(t, bytes.Contains(taskBytes, contracts.WalletCreationRequestTopic.Bytes()))
	assert.Equal(t, "497b7d7bb002736945c16f28175435ba9f4ad4863018be370d6901eba91c900800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000271100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", hex.EncodeToString(taskBytes))
}

func TestEncodeDepositTask(t *testing.T) {
	task := DepositTask{
		BaseTask: BaseTask{
			TaskId: 1,
		},
		TargetAddress:   "0xFa0c1810C5853348020e15a9C300c2363b5EBF41",
		Amount:          uint64(1000000000000000000),
		Chain:           uint8(types.ChainEthereum),
		ChainId:         uint32(1),
		BlockHeight:     uint64(21133979),
		TxHash:          "0x01cfa36f443bca6774be814ef667ead31be4493c6101e0093ab9a1d5142cb5a8",
		ContractAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
		Ticker:          "USDC",
		AssetType:       uint8(types.AssetTypeErc20),
		Decimal:         uint8(18),
	}
	taskBytes, err := EncodeTask(TaskTypeDeposit, task)
	assert.NoError(t, err)
	assert.NotNil(t, taskBytes)

	assert.True(t, bytes.Contains(taskBytes, contracts.DepositRequestTopic.Bytes()))
	assert.Equal(t, "f26824b39d161a7a9fdacf5c40e9fa65dd2a06d5a5b12719d68e55ae2683491f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000001427a9b00000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002a307846613063313831304335383533333438303230653135613943333030633233363362354542463431000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042307830316366613336663434336263613637373462653831346566363637656164333162653434393363363130316530303933616239613164353134326362356138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078413062383639393163363231386233366331643139443461326539456230634533363036654234380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045553444300000000000000000000000000000000000000000000000000000000", hex.EncodeToString(taskBytes))
}

func TestEncodeWithdrawalTask(t *testing.T) {
	task := WithdrawalTask{
		BaseTask: BaseTask{
			TaskId: 1,
		},
		TargetAddress:   "0xFa0c1810C5853348020e15a9C300c2363b5EBF41",
		Amount:          uint64(1000000000000000000),
		Chain:           uint8(types.ChainEthereum),
		ChainId:         uint32(1),
		BlockHeight:     uint64(21133979),
		TxHash:          "0x01cfa36f443bca6774be814ef667ead31be4493c6101e0093ab9a1d5142cb5a8",
		ContractAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
		Ticker:          "USDC",
		AssetType:       uint8(types.AssetTypeErc20),
		Decimal:         18,
		Fee:             uint64(100000000000000),
	}
	taskBytes, err := EncodeTask(TaskTypeWithdrawal, task)
	assert.NoError(t, err)
	assert.NotNil(t, taskBytes)

	assert.True(t, bytes.Contains(taskBytes, contracts.WithdrawalRequestTopic.Bytes()))
	assert.Equal(t, "4cd151cd1ef25ad1d7498e51a1ba595d51db95d66bfc1611a341aa0662003d840000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000001427a9b0000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000000002a307846613063313831304335383533333438303230653135613943333030633233363362354542463431000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042307830316366613336663434336263613637373462653831346566363637656164333162653434393363363130316530303933616239613164353134326362356138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078413062383639393163363231386233366331643139443461326539456230634533363036654234380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045553444300000000000000000000000000000000000000000000000000000000", hex.EncodeToString(taskBytes))
}

func TestParseCreateWalletTask(t *testing.T) {
	context, err := hex.DecodeString("497b7d7bb002736945c16f28175435ba9f4ad4863018be370d6901eba91c900800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000271100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	assert.NoError(t, err)

	task := DecodeTask(1, context)

	assert.NotNil(t, task)
	assert.IsType(t, &CreateWalletTask{}, task)

	request := task.(*CreateWalletTask)
	assert.Equal(t, TaskTypeCreateWallet, request.TaskType)
	assert.Equal(t, uint32(10001), request.Account)
}

func TestParseDepositTask(t *testing.T) {
	context, err := hex.DecodeString("f26824b39d161a7a9fdacf5c40e9fa65dd2a06d5a5b12719d68e55ae2683491f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000001427a9b00000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002a307846613063313831304335383533333438303230653135613943333030633233363362354542463431000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042307830316366613336663434336263613637373462653831346566363637656164333162653434393363363130316530303933616239613164353134326362356138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078413062383639393163363231386233366331643139443461326539456230634533363036654234380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045553444300000000000000000000000000000000000000000000000000000000")
	assert.NoError(t, err)

	task := DecodeTask(1, context)

	assert.NotNil(t, task)
	assert.IsType(t, &DepositTask{}, task)

	request := task.(*DepositTask)
	assert.Equal(t, TaskTypeDeposit, request.TaskType)
	assert.Equal(t, "0x01cfa36f443bca6774be814ef667ead31be4493c6101e0093ab9a1d5142cb5a8", request.TxHash)
}

func TestParseWithdrawalTask(t *testing.T) {
	context, err := hex.DecodeString("4cd151cd1ef25ad1d7498e51a1ba595d51db95d66bfc1611a341aa0662003d840000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000001427a9b0000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000000002a307846613063313831304335383533333438303230653135613943333030633233363362354542463431000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042307830316366613336663434336263613637373462653831346566363637656164333162653434393363363130316530303933616239613164353134326362356138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078413062383639393163363231386233366331643139443461326539456230634533363036654234380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045553444300000000000000000000000000000000000000000000000000000000")
	assert.NoError(t, err)

	task := DecodeTask(1, context)

	assert.NotNil(t, task)
	assert.IsType(t, &WithdrawalTask{}, task)

	request := task.(*WithdrawalTask)
	assert.Equal(t, TaskTypeWithdrawal, request.TaskType)
	assert.Equal(t, "0x01cfa36f443bca6774be814ef667ead31be4493c6101e0093ab9a1d5142cb5a8", request.TxHash)
}

func TestEncodeCreateWalletResult(t *testing.T) {
	task := contracts.TaskPayloadContractWalletCreationResult{
		Version:       uint8(TaskVersionV1),
		Success:       true,
		ErrorCode:     uint8(TaskErrorCodeSuccess),
		WalletAddress: "0xFa0c1810C5853348020e15a9C300c2363b5EBF41",
	}
	taskBytes, err := EncodeTaskResult(TaskTypeCreateWallet, task)
	assert.NoError(t, err)
	assert.NotNil(t, taskBytes)

	assert.True(t, bytes.Contains(taskBytes, contracts.WalletCreationResultTopic.Bytes()))
	assert.Equal(t, "440691550bb1f6d18c60b1a17fff36325a996ba3ab5917f3003445984c5302cf0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000002a30784661306331383130433538353333343830323065313561394333303063323336336235454246343100000000000000000000000000000000000000000000", hex.EncodeToString(taskBytes))
}

func TestEncodeDepositResult(t *testing.T) {
	task := contracts.TaskPayloadContractDepositResult{
		Version:   uint8(TaskVersionV1),
		Success:   true,
		ErrorCode: uint8(TaskErrorCodeSuccess),
	}
	taskBytes, err := EncodeTaskResult(TaskTypeDeposit, task)
	assert.NoError(t, err)
	assert.NotNil(t, taskBytes)

	assert.True(t, bytes.Contains(taskBytes, contracts.DepositResultTopic.Bytes()))
	assert.Equal(t, "ae9e6016838d9912f513c2adb0656673485ababaddbf853b28d121bf2ce24b9e000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", hex.EncodeToString(taskBytes))
}

func TestEncodeWithdrawResult(t *testing.T) {
	task := contracts.TaskPayloadContractWithdrawalResult{
		Version:   uint8(TaskVersionV1),
		Success:   true,
		ErrorCode: uint8(TaskErrorCodeSuccess),
	}
	taskBytes, err := EncodeTaskResult(TaskTypeWithdrawal, task)
	assert.NoError(t, err)
	assert.NotNil(t, taskBytes)

	assert.True(t, bytes.Contains(taskBytes, contracts.WithdrawalResultTopic.Bytes()))
	assert.Equal(t, "9a474499969867585df13ccda2ed8f3f9ad89cd1704e038cb941e1fbdc1c08fe000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", hex.EncodeToString(taskBytes))
}
