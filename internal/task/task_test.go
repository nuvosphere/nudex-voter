package task

import (
	"encoding/hex"
	"github.com/nuvosphere/nudex-voter/internal/layer2/contracts"
	"github.com/nuvosphere/nudex-voter/internal/types"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestEncodeCreateWalletTask(t *testing.T) {
	task := types.CreateWalletTask{
		BaseTask: types.BaseTask{
			TaskId: 1,
		},
		User:    "0xFa0c1810C5853348020e15a9C300c2363b5EBF41",
		Account: uint64(10001),
		Chain:   uint8(ETHEREUM),
		Index:   uint32(0),
	}
	bytes, err := encodeTask(types.TaskTypeCreateWallet, task)
	assert.NoError(t, err)
	assert.NotNil(t, bytes)

	assert.Equal(t, "0f1413e8d10cd1ec520cd20e110e7f744aadade9260edf12bea2ae80bf938c2e00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fa0c1810c5853348020e15a9c300c2363b5ebf41000000000000000000000000000000000000000000000000000000000000271100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hex.EncodeToString(bytes))
}

func TestEncodeDepositTask(t *testing.T) {
	task := types.DepositTask{
		BaseTask: types.BaseTask{
			TaskId: 1,
		},
		TargetAddress:   "0xFa0c1810C5853348020e15a9C300c2363b5EBF41",
		Amount:          uint64(1000000000000000000),
		Chain:           uint8(ETHEREUM),
		ChainId:         uint32(1),
		BlockHeight:     uint64(21133979),
		TxHash:          "0x01cfa36f443bca6774be814ef667ead31be4493c6101e0093ab9a1d5142cb5a8",
		ContractAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
		Ticker:          "USDC",
		AssetType:       uint8(ERC20),
		Decimal:         18,
	}
	bytes, err := encodeTask(types.TaskTypeDeposit, task)
	assert.NoError(t, err)
	assert.NotNil(t, bytes)

	assert.Equal(t, "a16e6f3f5818b6d9cdc9da7bb4b22b721875ee019d05d2416544b3ec35fe7b8b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000001427a9b00000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002a307846613063313831304335383533333438303230653135613943333030633233363362354542463431000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042307830316366613336663434336263613637373462653831346566363637656164333162653434393363363130316530303933616239613164353134326362356138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078413062383639393163363231386233366331643139443461326539456230634533363036654234380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045553444300000000000000000000000000000000000000000000000000000000", hex.EncodeToString(bytes))
}

func TestEncodeWithdrawalTask(t *testing.T) {
	task := types.WithdrawalTask{
		BaseTask: types.BaseTask{
			TaskId: 1,
		},
		TargetAddress:   "0xFa0c1810C5853348020e15a9C300c2363b5EBF41",
		Amount:          uint64(1000000000000000000),
		Chain:           uint8(ETHEREUM),
		ChainId:         uint32(1),
		BlockHeight:     uint64(21133979),
		TxHash:          "0x01cfa36f443bca6774be814ef667ead31be4493c6101e0093ab9a1d5142cb5a8",
		ContractAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
		Ticker:          "USDC",
		AssetType:       uint8(ERC20),
		Decimal:         18,
		Fee:             uint64(100000000000000),
	}
	bytes, err := encodeTask(types.TaskTypeWithdrawal, task)
	assert.NoError(t, err)
	assert.NotNil(t, bytes)

	assert.Equal(t, "3cf4fbf96439aad214ca1e3508b15d4b50f1767c8216a7efe11af2ac7a520e910000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000001427a9b0000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000000002a307846613063313831304335383533333438303230653135613943333030633233363362354542463431000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042307830316366613336663434336263613637373462653831346566363637656164333162653434393363363130316530303933616239613164353134326362356138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078413062383639393163363231386233366331643139443461326539456230634533363036654234380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045553444300000000000000000000000000000000000000000000000000000000", hex.EncodeToString(bytes))
}

func TestParseCreateWalletTask(t *testing.T) {
	context, err := hex.DecodeString("0f1413e8d10cd1ec520cd20e110e7f744aadade9260edf12bea2ae80bf938c2e00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fa0c1810c5853348020e15a9c300c2363b5ebf41000000000000000000000000000000000000000000000000000000000000271100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	assert.NoError(t, err)

	task, err := parseTask(context)

	assert.NoError(t, err)
	assert.NotNil(t, task)
	assert.IsType(t, contracts.TaskPayloadContractWalletCreationRequest{}, task)

	request := task.(contracts.TaskPayloadContractWalletCreationRequest)
	assert.Equal(t, uint32(V1), request.Version)
	assert.Equal(t, uint32(types.TaskTypeCreateWallet), request.TaskType)
	assert.Equal(t, uint64(10001), request.Account)
}

func TestParseDepositTask(t *testing.T) {
	context, err := hex.DecodeString("a16e6f3f5818b6d9cdc9da7bb4b22b721875ee019d05d2416544b3ec35fe7b8b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000001427a9b00000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002a307846613063313831304335383533333438303230653135613943333030633233363362354542463431000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042307830316366613336663434336263613637373462653831346566363637656164333162653434393363363130316530303933616239613164353134326362356138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078413062383639393163363231386233366331643139443461326539456230634533363036654234380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045553444300000000000000000000000000000000000000000000000000000000")
	assert.NoError(t, err)

	task, err := parseTask(context)

	assert.NoError(t, err)
	assert.NotNil(t, task)
	assert.IsType(t, contracts.TaskPayloadContractDepositRequest{}, task)

	request := task.(contracts.TaskPayloadContractDepositRequest)
	assert.Equal(t, uint32(V1), request.Version)
	assert.Equal(t, uint32(types.TaskTypeDeposit), request.TaskType)
	assert.Equal(t, "0x01cfa36f443bca6774be814ef667ead31be4493c6101e0093ab9a1d5142cb5a8", request.TxHash)
}
